{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["stripePromise","loadStripe","ProductDisplay","handleClick","className","src","alt","id","role","onClick","Message","message","App","useState","setMessage","useEffect","query","URLSearchParams","window","location","search","get","event","a","stripe","fetch","method","response","json","session","redirectToCheckout","sessionId","error","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"qPAMMA,G,MAAgBC,YAAW,gHAE3BC,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OACrB,iCACE,yBAAKC,UAAU,WACb,yBACEC,IAAI,kCACJC,IAAI,sCAEN,yBAAKF,UAAU,eACb,oDACA,wCAGJ,4BAAQG,GAAG,kBAAkBC,KAAK,OAAOC,QAASN,GAAlD,cAMEO,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACd,iCACE,2BAAIA,KA2DOC,MAvDf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNF,EADM,KACGG,EADH,KAGbC,qBAAU,WAER,IAAMC,EAAQ,IAAIC,gBAAgBC,OAAOC,SAASC,QAE9CJ,EAAMK,IAAI,YACZP,EAAW,yDAGTE,EAAMK,IAAI,aACZP,EACE,+EAGH,IAEH,IAAMX,EAAW,uCAAG,WAAOmB,GAAP,mBAAAC,EAAA,sEACGvB,EADH,cACZwB,EADY,gBAGKC,MAAM,kBAAmB,CAC9CC,OAAQ,SAJQ,cAGZC,EAHY,gBAOIA,EAASC,OAPb,cAOZC,EAPY,iBAUGL,EAAOM,mBAAmB,CAC7CC,UAAWF,EAAQtB,KAXH,eAcPyB,MAdO,4CAAH,sDAqBjB,OACE,yBAAK5B,UAAU,OACb,4BAAQA,UAAU,cAAlB,gBAGA,2BACGO,EACC,kBAAC,EAAD,CAASA,QAASA,IAElB,kBAAC,EAAD,CAAgBR,YAAaA,OCpEnB8B,QACW,cAA7Bf,OAAOC,SAASe,UAEe,UAA7BhB,OAAOC,SAASe,UAEhBhB,OAAOC,SAASe,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAf,GACLgB,QAAQhB,MAAMA,EAAMrB,a","file":"static/js/main.4b3b26a1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport './App.css';\n\n// Make sure to call `loadStripe` outside of a componentâ€™s render to avoid\n// recreating the `Stripe` object on every render.\nconst stripePromise = loadStripe(\"pk_test_51HbEOnEeOVT8VGp5cS7FkLI45FdhOJ6ZyAohDxNKnJyUaFr9t77se1gkcCg5DmbE9TrZlSxWzgT2RvnTdQkJurPb00t2VAl8pF\");\n\nconst ProductDisplay = ({ handleClick }) => (\n  <section>\n    <div className=\"product\">\n      <img\n        src=\"https://i.imgur.com/EHyR2nP.png\"\n        alt=\"The cover of Stubborn Attachments\"\n      />\n      <div className=\"description\">\n        <h3>Stubborn Attachments</h3>\n        <h5>$20.00</h5>\n      </div>\n    </div>\n    <button id=\"checkout-button\" role=\"link\" onClick={handleClick}>\n      Checkout\n    </button>\n  </section>\n);\n\nconst Message = ({ message }) => (\n  <section>\n    <p>{message}</p>\n  </section>\n);\n\nfunction App() {\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    // Check to see if this is a redirect back from Checkout\n    const query = new URLSearchParams(window.location.search);\n\n    if (query.get(\"success\")) {\n      setMessage(\"Order placed! You will receive an email confirmation.\");\n    }\n\n    if (query.get(\"canceled\")) {\n      setMessage(\n        \"Order canceled -- continue to shop around and checkout when you're ready.\"\n      );\n    }\n  }, []);\n\n  const handleClick = async (event) => {\n    const stripe = await stripePromise;\n\n    const response = await fetch(\"/create-session\", {\n      method: \"POST\",\n    });\n\n    const session = await response.json();\n\n    // When the customer clicks on the button, redirect them to Checkout.\n    const result = await stripe.redirectToCheckout({\n      sessionId: session.id,\n    });\n\n    if (result.error) {\n      // If `redirectToCheckout` fails due to a browser or network\n      // error, display the localized error message to your customer\n      // using `result.error.message`.\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Inquiry Yoga\n      </header>\n      <p>\n        {message ? (\n          <Message message={message} />\n        ) : (\n          <ProductDisplay handleClick={handleClick} />\n        )}\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}